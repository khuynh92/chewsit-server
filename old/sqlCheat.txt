//Link to local database/create

CREATE DATABASE chews_it;

CREATE TABLE IF NOT EXISTS users (
id SERIAL PRIMARY KEY,
name VARCHAR(100) NOT NULL UNIQUE,
pin VARCHAR(20) NOT NULL,
preferences TEXT
);

CREATE TABLE IF NOT EXISTS favorites (
yelp_id VARCHAR(255),
users_id INT REFERENCES users(id) NOT NULL,
notes TEXT
);

//test

//database test get
app.get('/testUsers', (req, res) => {
  client.query(`
  SELECT users.name, favorites.yelp_id FROM users
  INNER JOIN favorites ON users.id = favorites.favorites_id
  WHERE users.id=2;
  `)
    .then(results => res.send(results.rows));
});

//database test get all users and favorites
app.get('/all', (req, res) => {
  client.query(`
  SELECT * FROM users
  INNER JOIN favorites ON users.id = favorites.users_id
  ;`)
    .then(results => res.send(results.rows))
    .catch(err => console.log(err));    
});

//database get all users
app.get('/users/all', (req, res) => {
  client.query(`
  SELECT * FROM users
  ;`)
    .then(results => res.send(results.rows))
    .catch(err => console.log(err));   
});

//database add new user
app.post('/users/new', (req, res) => {
  client.query(`
  INSERT INTO users (name, pin)
  VALUES ($1, $2)
  ;`,
  [req.body.name, req.body.pin]
  )
    .then(results => res.send(results.rows))
    .catch(err => console.log(err));
});

//database get all favorites
app.get('/favorites/all', (req, res) => {
  client.query(`
    SELECT * FROM favorites
    ;`)
    .then(results => res.send(results.rows))
    .catch(err => console.log(err));   
});

//database add new favorite
app.post('/favorites/new', (req, res) => {
  client.query(`
  INSERT INTO favorites (yelp_id, users_id)
  VALUES ($1, $2)
  ;`,
  [req.body.yelp_id, req.body.users_id]
  )
    .then(results => res.send(results.rows))
    .catch(err => console.log(err));
});


//database test update user info

app.put('/users/update/name', (req, res) => {
  client.query(`
  UPDATE users
  SET name=$1
  WHERE id=$2
  ;`,
  [request.params.name, request.params.id]
  )
    .then(results => res.send('Update successful'))
    .catch(err => console.log(err))
});

app.put('/users/update/pin', (req, res) => {
  client.query(`
  UPDATE users
  SET pin=$1
  WHERE id=$2
  ;`,
  [req.params.pin, req.params.id])
    .then(results => res.send('Update successful'))
    .catch(err => console.log(err));
});

//database test update favorite info

app.put('/users/update/favorites', (req, res) => {
  client.query(`
  UPDATE favorites
  SET yelp_id=$1
  WHERE users_id=$2
  `,
  [req.params.yelp_id, req.params.favorites_id])
    .then(results => res.send('Update successful'))
    .catch(err => console.log(err));
});

//database delete favorite
app.delete('/favorites/delete/:id', (req, res) => {
  client.query(`
  DELETE FROM favorites
  where users_id=$1
 `,
  [req.params.id])
    .then(results => res.send('Delete successful'))
    .catch(err => console.log(err));
});

//database test update user info

//database delete user
app.delete('/users/delete/:id' , (req, res) => {
  client.query(`
  DELETE FROM users
  where id=$1
 ;`,
  [request.params.id])
    .then(results => res.send('Delete successful'))
    .catch(err => console.log(err));
});

//To Heroku from remote
 PGPASSWORD=82469173 pg_dump -U postgres -F c -c -O chews_it > out.sql

Use the dump file to create your heroku database.
This step requires you to have a heroku app that's been setup with heroku postgres. You don't need to do anything with the CLI here as we will be doing all of this manually.

First, navigate to your heroku app, click on resources, and click on the database to bring you to the database screen.
Next, click on settings, and go to the database credentials.
You should see a screen that looks like this.
Note that this has the hostname, database, username, password, port, etc... You will need most of these for the next command.
You will type in this command, but you will replace your specific pieces of data into this command:
PGUSER=mibaxbq PGPASSWORD=0bdf8bbc6930e026d pg_restore -h 'ec2-60-13.compute-1.amazonaws.com' -d d6n3tt6nc < out.sql
PGUSER & PGPASSWORD are the username and password from the credentials you got inside heroku.
-h stands for hostname.
-d stands for database. (The database from the creds.)
< Note that this must be there and in this direction.
out.sql This is referring to the out file we used earlier.
If you typed this in correctly you WILL see a couple errors pop up. Ignore them for now and go back to heroku and check your database. You should see that there is a table added to your database.

Note that you should only be doing this command to initially create ( and optionally seed) the deployed database. If there database already has this table and there is data in it then this will fail.